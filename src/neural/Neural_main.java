package neural;

public class Neural_main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		double pattern [][] = { {1,1,1,1,0,1,1,0,1,1,1,1},
							{0,1,1,1,0,1,1,0,1,1,1,1},
							{1,1,0,1,0,1,1,0,1,1,1,1},
							{1,1,1,1,0,1,1,0,1,1,1,0},
							{1,1,1,1,0,1,1,0,1,0,1,1},
							{0,0,0,1,1,1,1,0,1,1,1,1},
							{0,0,0,0,1,1,1,0,1,1,1,1},
							{0,0,0,1,1,0,1,0,1,1,1,1},
							{0,0,0,1,1,1,1,0,1,1,1,0},
							{0,0,0,1,1,1,1,0,1,0,1,1},
							{1,1,1,1,0,1,1,1,1,0,0,0},
							{0,1,1,1,0,1,1,1,1,0,0,0},
							{1,1,0,1,0,1,1,1,1,0,0,0},
							{1,1,1,1,0,1,1,1,0,0,0,0},
							{1,1,1,1,0,1,0,1,1,0,0,0},
							{1,0,1,1,0,1,1,0,1,1,1,1},
							{1,1,1,1,0,0,1,0,1,1,1,1},
							{1,1,1,1,0,1,1,0,0,1,1,1},
							{1,1,1,1,0,1,1,0,1,1,0,1},
							{1,1,1,1,0,1,0,0,1,1,1,1},
							{1,1,1,0,0,1,1,0,1,1,1,1},
							{0,0,1,1,0,1,1,0,1,1,1,1},
							{0,1,1,1,0,0,1,0,1,1,1,1},
							{0,1,1,1,0,1,1,0,0,1,1,1},
							{0,1,1,1,0,1,1,0,1,1,0,1},
							{0,1,1,1,0,1,0,0,1,1,1,1},
							{0,1,1,0,0,1,1,0,1,1,1,1},
							{1,1,0,1,0,0,1,0,1,1,1,1},
							{1,1,0,1,0,1,1,0,0,1,1,1},
							{1,1,0,1,0,1,1,0,1,1,0,1},
							{1,1,0,1,0,1,0,0,1,1,1,1},
							{1,1,0,0,0,1,1,0,1,1,1,1},
							{0,1,0,0,1,0,0,1,0,0,1,0},
							{1,1,0,0,1,0,0,1,0,0,1,0},
							{0,1,0,0,1,0,0,1,0,0,1,0},
							{0,1,0,0,1,0,0,1,0,1,1,0},
							{0,1,0,0,1,0,0,1,0,0,1,1},
							{1,1,0,0,1,0,0,1,0,1,1,0},
							{1,1,0,0,1,0,0,1,0,0,1,1},
							{1,1,0,0,1,0,0,1,0,1,1,1},
							{0,1,0,0,1,1,0,1,0,0,1,0},
							{0,1,0,0,1,0,0,1,1,0,1,0},
							{1,1,0,0,1,1,0,1,0,0,1,0},
							{1,1,0,0,1,0,0,1,1,0,1,0},
							{0,1,0,0,1,1,0,1,0,1,1,0},
							{0,1,0,0,1,0,0,1,1,1,1,0},
							{0,1,0,0,1,0,0,1,0,1,1,1},
							{1,1,0,0,1,1,0,1,1,0,1,1},
							{1,1,0,0,1,0,0,1,0,0,1,0},
							{0,1,1,0,1,1,0,1,1,0,1,1},
							{1,1,0,1,1,0,0,1,0,0,1,0},
							{1,1,0,0,1,0,1,1,0,0,1,0},
							{1,1,0,1,1,0,1,1,0,1,1,0},
							{1,1,0,0,1,0,0,0,0,0,1,0},
							{0,1,0,0,1,0,0,1,0,1,0,0},
							{1,0,0,0,1,0,0,1,0,0,1,0},
							{1,0,0,0,1,0,0,1,0,0,0,1},
							{0,1,0,0,0,0,0,1,0,1,1,0},
							{0,1,0,0,1,0,0,0,0,1,1,0},
							{0,0,0,0,1,0,0,1,0,1,1,0},
							{0,0,0,0,1,0,0,1,0,0,1,0},
							{0,1,0,0,1,0,0,1,0,0,0,0},
							{0,1,0,0,0,1,0,0,1,0,1,0},
							{0,1,0,1,0,0,1,0,0,0,1,0},
		};
		double answer [][] = { {1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{1,0},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
							{0,1},
		};
		Neural_lib nlib = new Neural_lib(pattern, answer, 3, 2, 50);
		nlib.getIteration();
		double testpattern[][] = {
				{0,1,0,1,0,1,1,0,1,1,0,1},
				{0,1,1,0,1,0,0,1,0,0,1,0},
		};
		nlib.getTest(testpattern[1]);
		int correct = 0;
		int flag;
		for(int i = 0; i < pattern.length; i++) {
			double a_output[] = nlib.getTest(pattern[i]);
			//ひとまず2次元
			if(a_output[0] > a_output[1]) flag = 0;
			else flag = 1;
			if(answer[i][flag] == 1) correct++;
		}
		System.out.println("Matching Rate = "+ correct / pattern.length * 100 +"%");
	}

}
